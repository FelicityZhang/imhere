const Sequelize = require( 'sequelize' );

const sequelize = new Sequelize( {
    database: 'imhere_db',
    dialect: 'postgres',
    operatorsAliases: false,
    define: {
        underscored: true, // use underscored column names for columns generated by sequelize (e.g. timestamps as created_at rather than createdAt)
    }
} );

const Seeker = sequelize.define('seeker', {
    name: {
        type:Sequelize.STRING
    },
    password_digest: {
        type:Sequelize.STRING
    },
    picture_url: {
        type: Sequelize.TEXT
    },
    description: {
        type: Sequelize.TEXT
    },
    email: {
        type: Sequelize.TEXT
    }
  });

const Giver = sequelize.define('giver', {
name: {
    type:Sequelize.STRING
},
age: {
    type:Sequelize.INTEGER
},
gender: {
     type:Sequelize.STRING
},
skill: {
    type:Sequelize.TEXT
},
rates: {
    type:Sequelize.INTEGER
},
password_digest: {
    type:Sequelize.STRING
},
picture_url: {
    type: Sequelize.TEXT
},
description: {
    type: Sequelize.TEXT
}
});



const Message = sequelize.define('message', {
    sender_id: {
        type:Sequelize.INTEGER
    },
    receiver_id: {
        type:Sequelize.INTEGER
    },
    content: {
        type:Sequelize.TEXT
    },
});

const Request = sequelize.define('request', {
    giver_id: {
        type: Sequelize.INTEGER
    },
    seeker_id: {
        type: Sequelize.INTEGER
    },
    approval: {
        type: Sequelize.INTEGER
    },
    title: {
        type: Sequelize.TEXT
    },
    start_time: {
        type: Sequelize.TEXT
    },
    end_time: {
        type: Sequelize.TEXT
    },
    description: {
        type: Sequelize.TEXT
    },
    });

const Review = sequelize.define('review', {
    request_id: {
        type: Sequelize.INTEGER
    },
    rating: {
        type: Sequelize.INTEGER
    },
    content: {
        type: Sequelize.TEXT
    },
    }); 
    
    const Skill = sequelize.define('skill', {
        description: {
            type: Sequelize.TEXT
        }
    })
    

    
    Giver.hasMany(Message, { onDelete: 'cascade' })
    Message.belongsTo(Giver);

    Giver.hasMany(Request, { onDelete: 'cascade' })
    Request.belongsTo(Giver);

    Giver.hasMany(Skill)

    Seeker.hasMany(Message)
    Message.belongsTo(Seeker);

    Seeker.hasMany(Request)
    Request.belongsTo(Seeker);
    
sequelize.sync();
    

module.exports = {
    sequelize,
    Seeker,
    Giver,
    Message,
    Request,
    Review,
    Skill
}
